import pandas as pd
from edgar import *
from edgar.financials import Financials

# Set EDGAR identity
set_identity("Curtis Gile curtis.j.gile@gmail.com")

# Placeholder values for DCF assumptions
WACC = 0.10  # Weighted Average Cost of Capital (10%)
growth_rate = 0.03  # Perpetual growth rate (3%)
projection_years = 20  # Number of years to project

# Get the latest 10-K filing for Apple
tenk = Company("AAPL").get_filings(form="10-K").latest(1).obj()

# Access the financials from the filing
financials = tenk.financials

# Get the cash flow statement as a DataFrame
cash_flow_statement_df = financials.get_cash_flow_statement().get_dataframe()

# Create a new DataFrame to store the output: Year, Free Cash Flow, NPV, and Terminal Value
output_df = pd.DataFrame(columns=['Year', 'Free Cash Flow', 'Net Present Value', 'Terminal Value'])

# Check if necessary columns exist in the cash flow statement
required_columns = ['Cash generated by operating activities', 'Cash used in financing activities']
if all(column in cash_flow_statement_df.index for column in required_columns):
    # Calculate Free Cash Flow for each year and store it in the output DataFrame
    for year in cash_flow_statement_df.columns:
        try:
            # Get values and convert them to numeric
            cash_operating = pd.to_numeric(cash_flow_statement_df.at['Cash generated by operating activities', year], errors='coerce')
            cash_financing = pd.to_numeric(cash_flow_statement_df.at['Cash used in financing activities', year], errors='coerce')

            # Calculate free cash flow and convert to millions
            free_cash_flow = (cash_operating + cash_financing) / 1_000_000

            # Create a DataFrame for the DCF projections for this specific year
            projection_df = pd.DataFrame(index=range(1, projection_years + 1), columns=['Projected FCF', 'Discounted FCF'])

            # Project cash flows for the next 20 years using the growth rate
            for proj_year in projection_df.index:
                # Calculate projected FCF for each year
                projected_fcf = free_cash_flow * ((1 + growth_rate) ** proj_year)
                projection_df.at[proj_year, 'Projected FCF'] = projected_fcf

                # Discount the projected FCF to the present value
                discount_factor = (1 + WACC) ** proj_year
                discounted_fcf = projected_fcf / discount_factor
                projection_df.at[proj_year, 'Discounted FCF'] = discounted_fcf

            # Calculate the terminal value using the last year's projected FCF
            terminal_value = (projection_df.at[projection_years, 'Projected FCF'] * (1 + growth_rate)) / (WACC - growth_rate)

            # Discount the terminal value to present value
            terminal_discount_factor = (1 + WACC) ** projection_years
            present_value_terminal = terminal_value / terminal_discount_factor

            # Calculate Net Present Value (NPV) for this year
            npv = projection_df['Discounted FCF'].sum() + present_value_terminal

            # Append the free cash flow, NPV, and terminal value to the output DataFrame
            output_df = pd.concat([output_df, pd.DataFrame({
                'Year': [year],
                'Free Cash Flow': [free_cash_flow],
                'Net Present Value': [npv],
                'Terminal Value': [present_value_terminal]
            })])

        except KeyError:
            # Skip if data is missing
            continue

# Format the numbers in the output DataFrame to two decimal places
output_df[['Free Cash Flow', 'Net Present Value', 'Terminal Value']] = output_df[['Free Cash Flow', 'Net Present Value', 'Terminal Value']].applymap(lambda x: f"${x:,.2f}M" if pd.notna(x) else x)

# Output the updated DataFrame (now includes DCF calculations)
print(output_df)

# GUI Table Display
import tkinter as tk
from tkinter import ttk

# Create a new window to display the DataFrame
root = tk.Tk()
root.title('Financial Statements Summary')

# Convert DataFrame to a list of lists for display
data = [output_df.columns.values.tolist()] + output_df.values.tolist()

# Create a Treeview widget
tree = ttk.Treeview(root, columns=data[0], show='headings')
tree.pack(expand=True, fill='both')

# Define column headings
for col in data[0]:
    tree.heading(col, text=col)
    tree.column(col, width=150, anchor='center')

# Add rows to the Treeview
for row in data[1:]:
    tree.insert('', 'end', values=row)

# Run the Tkinter event loop
root.mainloop()
